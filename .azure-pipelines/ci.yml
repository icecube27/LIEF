# C/C++ with GCC
# Build your C/C++ project with GCC using make.
# Add steps that publish test results, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/c-cpp/gcc

trigger:
- master
- ci/azure

jobs:
  - job: Windows_CI
    displayName: Windows CI
    pool:
      vmImage: windows-2019

    strategy:
        maxParallel: 6
        matrix:
          Python36-64bit:
            PYTHON_VERSION: '3.6'
            PYTHON_ARCH: 'x64'
            BITS: 64

    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          addToPath: true
          architecture: $(PYTHON_ARCH)
      - script: python -m pip install --disable-pip-version-check --user --upgrade pip
        displayName: 'Install tools'

      - script: python -m pip install --user wheel mako
        displayName: 'Install tools'

      - script: python -m pip install --upgrade setuptools
        displayName: 'Install tools'

      - powershell: |
          mkdir $(Build.BinariesDirectory)\build
        displayName: "Create build folder"

      - powershell: |
          (New-Object System.Net.WebClient).DownloadFile(`
          "https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-win.zip",`
          "$env:TEMP\ninja-win.zip")
          mkdir "C:\Program Files\Ninja"
          7z x -o"C:\Program Files\Ninja" -y "$env:TEMP\ninja-win.zip"
          Write-Host "##vso[task.prependpath]C:\Program Files\Ninja"
        displayName: "Install Ninja"

        #- script: |
        #    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        #    cmake -G Ninja ^
        #    -DCMAKE_C_COMPILER=cl.exe ^
        #    -DCMAKE_CXX_COMPILER=cl.exe ^
        #    -DCMAKE_BUILD_TYPE=Release ^
        #    -DOSQUERY_BUILD_TESTS=ON ^
        #    -DCMAKE_C_COMPILER_LAUNCHER="sccache.exe" ^
        #    -DCMAKE_CXX_COMPILER_LAUNCHER="sccache.exe" ^
        #    $(Build.SourcesDirectory)
        #  displayName: "Configure"
        #  workingDirectory: $(Build.BinariesDirectory)\build

      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          python .\setup.py --sdk --lief-test bdist_wheel && exit 0
        displayName: "Configure"
        workingDirectory: $(Build.SourcesDirectory)


